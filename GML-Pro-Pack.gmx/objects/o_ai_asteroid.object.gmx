<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_troid22</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_uberparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>direction=random(360);
image_angle=direction;
alpha=1.0;
tint=color_fuzzy(96,255,96,255,96,255);//c_white;
frame=0;
pickable=false;
debris=true;
hitpoints=200;
dying=false;
dead=false;
lifespan=100;
explosion=0;
fragments=true;
fragment=s_troid1;
fragmented=0;
scale=1.0;
dx=(random(1)-0.5)*cos(direction);
dy=(random(1)-0.5)*sin(direction);
spin=0.01;
// Volatile troids explode when heated up
heat=0;
volatility=100;
delta_volatility=1.0; // linear increase in volatility until
max_volatility=150; // explodes..
reaction_instant=0;
reaction_time=5;
heatable=true;
heat_flare1=1;
heat_flare2=2;
cooldown=0.5;
// Venting...?
collided_x=0;
collided_y=0;
// See Databank
chemicals=0;
chemical[0]=0;

// Collided with
collided=noone;
impacted=false;

get_asteroid(id,random(23));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>collided=noone;
impacted=false;

// Animation
if ( animated ) frame+=animspeed;

// Move
x+=dx;
y+=dy;

collided_x=x;
collided_y=y;

// Spin
direction+=spin;
image_angle=direction;


// Heat
if ( heatable ) {
 if ( heat &lt; volatility ) { if ( heat &gt; 0 ) heat-=cooldown; }
 else {
  heat+=delta_volatility;
 } 
}

// Calculate distance to player, remove if beyond
if ( dist2d(global.player.x,global.player.y,x,y) &gt; room_width+room_width*0.5 ) {
 var f,g;
 f=random(4)-fragmented;
 if ( f &gt; 0 ) for ( g=0; g&lt;f; g++ ) event_user(11);
 instance_destroy();
}

// Boom
if ( hitpoints &lt;= 0 or heat &gt; max_volatility ) {
 if ( !dying ) {
  dying=true;
  request_explosion(x,y,explosion);
  lifespan=sprite_get_number(s_huge_explosion);
 }
 lifespan-=1;
 if ( lifespan &lt;= 0 ) dead=true;
 else 
 alpha=lifespan/(sprite_get_number(s_huge_explosion));
} 

if ( dead ) {
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var mw;
mw=other.image_xscale*sprite_get_width(s_playership);
if ( pickable and dist2d(other.x,other.y,x,y) &lt; mw/2 ) {
 with (other) {
  // transfer chemicals to player cargo
 }
 audio_play_sound(sfx_drill,100,0);
 audio_play_sound(sfx_grind,100,0);
 audio_play_sound(sfx_cargo_dump,100,0);
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var mw,nw;
mw=scale*sprite_get_width(sprite);
if ( mw &gt; 12 and fragments and random(1) &gt; 0.65 ) {
 // Toss fragments (triggered by a weapon)
 o=instance_create(x,y,o_ai_asteroid);
 o.sprite=sprite;
 o.frame=frame;
 o.dx+=dx;
 o.dy+=dy;
 o.x=x;
 o.y=y;
 if ( random(1) &lt; 0.5 ) o.depth=depth-1;
 else o.depth=depth+1;
 o.spin=spin*2;
 o.heatable=heatable;
 o.tint=tint;
 get_asteroid(o,troid);
 o.animated=animated;
 o.scale=scale*random(0.7);
 if ( o.scale&lt; 0.1 ) o.scale=0.1;
 nw=o.scale*sprite_get_width(o.sprite);
 o.explosion=explosion;
 o.animspeed=animspeed;
 o.heat_flare1=heat_flare1;
 o.heat_flare2=heat_flare2;
 o.cooldown=cooldown;
 if ( nw &lt; 24 ) {
  o.pickable=true;
  o.fragments=false;
 } else o.pickable=pickable;
 o.heat=heat/(1+random(1));
 o.volatility=volatility/(1+random(1));
 o.max_volatility=max_volatility;
 o.hitpoints=hitpoints/(1+random(1));
 // copy chemicals from parent
 fragmented+=1;
 if ( fragmented &gt; 5 ) hitpoints=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var mw;
mw=scale*sprite_get_width(sprite);
if ( dist2d(collided_x,collided_y,x,y) &lt; mw/2 ) {
 impacted=true;
 hitpoints-=damage;
 if ( heatable ) heat+=heating;
 event_user(11);
} else impacted=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite,frame,x,y,scale,scale,image_angle,tint,alpha);

if ( heatable ) { // Draw a glow
 var a;
 a=heat/max_volatility;
 draw_set_blend_mode(bm_add);
 draw_sprite_ext(s_lights_add,1,x,y,1,1,(x+y),c_red,a);
 draw_sprite_ext(s_lights_add,1,x,y,1,1,((x+y)/2),c_white,a);
 draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>20,20</point>
    <point>20,20</point>
  </PhysicsShapePoints>
</object>
