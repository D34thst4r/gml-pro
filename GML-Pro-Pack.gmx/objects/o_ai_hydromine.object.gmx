<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_hydromine</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i,j,r;
name="Cryonic Hydrogarden";
uid=new_uid(object_index);
dying=false;
turnSpeed=0.0;
sprite=s_hydromine;
scale=1.0;
screenw=sprite_get_width(sprite)*scale;
screenh=sprite_get_height(sprite)*scale;
direction=number_range(0,360);
alpha=1.0;
color=c_white;
shields=0;
totalshields=100;
hitpoints=1000;
totallife=1000;
velocity=0;
team=1;
lasthit=240;
statusdelay=240;
heatdiss=1; // heat dissapation
elecres=1; // electrical resistance
acidres=1; // acid resistance
radres=1; // radiation resistance
overloading=100;
overloadrate=10;
overloadspeed=10;
overloadspeeddecrease=0.1;
overloaddecrease=1;
staticdischaring=true;
nanorepairing=true;
crew=30;
mincrew=10+(random(6)-3);
ejections_total=0;
cargo=100;

next_process=40.0;
warning_light=s_cbna_spot2;
warning_light_instant=0.0;
warning_light_lifespan=10.0;
warning_light_y=62;
warning_light_x=10;
warning_light_degrees=30.0;
warning_tween=real(int(number_range(27,31)));
wt2=71;
mine_delay=3.0;
mine_instant=0.0;
mine_limit=9.0;
mine_duration=2*mine_limit;
mines=3;
mine_x[0]=-205;
mine_y[0]=-83;
mine_xscale[0]=1.0;
mine_yscale[0]=1.0;
mine_rot[0]=0.0;
mine_x[1]=-213;
mine_y[1]=138;
mine_xscale[1]=0.8;
mine_yscale[1]=0.8;
mine_rot[1]=0.0;
mine_x[2]=214;
mine_y[2]=135;
mine_xscale[2]=1.0;
mine_yscale[2]=1.0;
mine_rot[2]=180.0;


// Establish hardpoints, mounts and munition types.
hardpoints=5;
mount_hardpoint(
 id,0,-30,2,0,s_medtur_11,0,o_weapon1,180.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);
mount_hardpoint(
 id,1, 86, 129,0,s_turret1,0,o_weapon1,90.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);
mount_hardpoint(
 id,2, 128, 136,0,s_tinytur_16,0,o_weapon1,90.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);
mount_hardpoint(
 id,3,-126, 136,0,s_tinytur_16,0,o_weapon1,90.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);
mount_hardpoint(
 id,4, 30,2,0,s_medtur_11,0,o_weapon1,270.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);

// Lights
lights=9
mount_light(id,0,-130,-240,c_blue,  1,0.25,s_lights_add,1,0, 0.1,0,bm_add,0,0.30,0.0);
mount_light(id,1, 138,-225,c_purple,2,0.75,s_lights_add,4,0, 0.1,0,bm_add,0,0.10,0.0);
mount_light(id,2, 179,-230,c_lime,  3,1.0, s_lights_add,4,0,0.01,0,bm_add,0,0.10,0.0);
mount_light(id,3,  -5, -24,c_orange,4,1.0, s_lights_add,5,0,0.01,0,bm_add,0,0.15,0.0);
mount_light(id,4,   5, -24,c_orange,4,1.0, s_lights_add,5,0,0.01,0,bm_add,0,0.15,0.5);
mount_light(id,5,   1,-232,c_red,  19,3.0, s_lights_add,5,0,0.01,0,bm_add,0,0.20,1.0);
mount_light(id,6,  27,-231,c_red,  20,3.0, s_lights_add,5,0,0.01,0,bm_add,0,0.20,1.5);
mount_light(id,7,  16, 159,c_orange,0,1.0, s_lights_add,6,0,0.01,0,bm_add,0, 1.0,0.0);
mount_light(id,8, 207, -27,c_orange,0,0.3, s_lights_add,6,0,0.01,0,bm_add,0, 0.2,0.0);

// Init damage profile
systems[0]=100;
systems[1]=100;
systems[2]=100;
systems[3]=100;
systems[4]=100;

spid=find_ship_profile(sprite_index);
targetinfo=noone;

// Build a percentile copy of the grid
// Build a heat/cold grid
st_vec2d_get(global.ship_profile_vec[spid]);
damage_w=global.vec_x;
damage_h=global.vec_y;
damage[0,0]=0;
heatcold[0,0]=0;
melted[0,0]=0;
melted_sprite[0,0]=noone;
melted_num[0,0]=0;
static[0,0]=0;
electrified[0,0]=0;
acid[0,0]=0;
acidized[0,0]=0;
radiation[0,0]=0;
irradiated[0,0]=0;
ejections[0,0]=0;
ejection_alpha[0,0]=0;
totalrads=0;
for ( i=0; i&lt;global.vec_x; i++ ) for ( j=0; j&lt;global.vec_y; j++ ) {
 r=sa_get(global.ship_profile[spid],i,j);
 if ( r == 1 ) {
  melted[i,j]=0;
  melted_sprite[i,j]=noone;
  melted_num[i,j]=0;
  ejections[i,j]=0;
  ejection_alpha[i,j]=0;
  heatcold[i,j]=0;
  acid[i,j]=0;
  acidized[i,j]=0;
  radiation[i,j]=0;
  irradiated[i,j]=0;
  static[i,j]=0;
  electrified[i,j]=0;
  damage[i,j]=100;
 } else {
  melted[i,j]=-666;
  melted_sprite[i,j]=noone;
  melted_num[i,j]=-666;
  ejections[i,j]=-666;
  ejection_alpha[i,j]=0;
  heatcold[i,j]=-666;
  acid[i,j]=-666;
  acidized[i,j]=-666;
  radiation[i,j]=-666;
  irradiated[i,j]=-666;
  static[i,j]=-666;
  electrified[i,j]=-666;
  damage[i,j]=-666;
 }
}
shipfx_probe_x=0;
shipfx_probe_y=0;

// Register with the shipfx manager
register_shipfx(id);

// Collision profile
create_collision_profile(id);

// Set when you change the scale
image_xscale=scale;
image_yscale=scale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( targetinfo != noone ) {
 with (targetinfo) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>check_instance_messages(id);

lasthit+=1;

// Collision
collision_damage(id);

if ( hitpoints &lt;= 0 ) {
 if ( !dying ) {
  dying=true;
  request_explosion(x,y,0);
  request_explosion(x,y,2);
  request_explosion(x,y,3);
  request_explosions(x,y,1,256+64,10+random(10),512,30,5);
//  5.0,0.75,
//  2.0
//  );
  lifespan=sprite_get_number(s_huge_explosion);
 }
 if ( random(100) &lt; 3 ) {
  request_explosions(x,y,1,lifespan+64,random(10),512,15,5);
 }
 lifespan-=1;
 if ( lifespan &lt;= 0 ) dead=true;
 else 
 alpha=lifespan/(sprite_get_number(s_huge_explosion));
} 

// Stop the overload
if ( overloadspeed &gt; 2 ) overloadspeed-=overloadspeeddecrease;
if ( overloading &gt; 0 ) overloading-=overloaddecrease;

// Drift
direction+=turnSpeed;

// Turning
image_angle=direction;

// Move position based on velocity
move(id);

// Die
if ( dead ) instance_destroy();
else update_shipfx(id);

//event_user(1);  debug in draw
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( targetinfo != noone ) {
 with ( targetinfo ) instance_destroy();
 targetinfo=noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( targetinfo == noone ) {
 targetinfo=instance_create(x+(screenw/4),y-(screenh/2),o_targetinfo);
 targetinfo.target=id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for ( i=0; i&lt;hardpoints; i++ ) {
 hardpoint_target[i]=global.player;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( random(10) &lt; 1.5 ) {
 var ex,ey,o,a,s;
 rotate_point(-degtorad(image_angle),-83,134);
 ex=x+global.script_rotate_point_x;
 ey=y+global.script_rotate_point_y;
 a=random(pi/2);
 s=s_smokepuff;
 if ( random(10) &lt;= 1 ) {
  o=emit_fade_film(s,
   ex,ey,
   0.5,1.75,
   0.4,
   1.0,3.5,15.0,
  (color_fuzzy(16,64,0,32,19,125)),
   bm_normal
  );
  o.scaleFollowsDuration=false;
  o.dx=cos(a+degtorad(image_angle))*0.5;
  o.dy=sin(a+degtorad(image_angle))*0.5;
  o.depth-=1;
 }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Trigger and repeat mining process
if ( next_process &gt; 0.0 ) {
 next_process-=1/room_speed;
}
if ( next_process &lt;= 0.0 ) {
 next_process=30.0;
 warning_light_instant=0.0;
 mine_instant=0.0;
 mine_delay=3.0;
 light_color[7]=c_black;
 warning_tween=real(int(number_range(27,31)));
} else {
 warning_light_instant+=1/room_speed;
 if ( warning_light_instant &lt; warning_light_lifespan ) {
  var p,T,angle,q;
  p=warning_light_instant/warning_light_lifespan;
  T=tween(warning_tween,p);
  angle=180+T*warning_light_degrees+45;
  rotate_point(-degtorad(image_angle),warning_light_x,warning_light_y);
  global.script_rotate_point_x+=x;
  global.script_rotate_point_y+=y;
  draw_set_blend_mode(bm_add);
  q=tween(wt2,p);
  draw_sprite_ext(warning_light,0,global.script_rotate_point_x,global.script_rotate_point_y,
   3.0,1.0,
   angle,c_orange,q
  );
  draw_sprite_ext(s_lights_add,0,global.script_rotate_point_x,global.script_rotate_point_y,
   0.4,0.4,
   x+y+angle,c_white,q
  );
  rotate_point(-degtorad(image_angle),-warning_light_x,warning_light_y);
  global.script_rotate_point_x+=x;
  global.script_rotate_point_y+=y;
  draw_sprite_ext(warning_light,0,global.script_rotate_point_x,global.script_rotate_point_y,
   3.0,1.0,
   180+angle,c_orange,q
  );
  draw_sprite_ext(s_lights_add,0,global.script_rotate_point_x,global.script_rotate_point_y,
   0.4,0.4,
   x+y+angle+90,c_white,q
  );
  draw_set_blend_mode(bm_normal);
 }
 if ( mine_delay &gt; 0.0 ) {
  mine_delay-=1/room_speed;
 } else if ( mine_instant &lt; mine_duration ) {
  light_color[7]=c_orange;
  mine_instant+=1/room_speed;
  var alpha;
  if ( mine_instant &gt; mine_limit ) alpha=((2*mine_limit)-mine_instant)/mine_limit;
  else alpha=mine_instant/mine_limit;
  var i;
  draw_set_blend_mode(bm_add);
  for ( i=0; i&lt;mines; i++ ) {
   rotate_point(-degtorad(image_angle),mine_x[i],mine_y[i]);
   global.script_rotate_point_x+=x;
   global.script_rotate_point_y+=y;
   draw_sprite_ext(s_minelight,0,global.script_rotate_point_x,global.script_rotate_point_y,
    mine_xscale[i],mine_yscale[i],
    mine_rot[i]+image_angle,
    c_white,
    alpha
   );
   // Emit Smoke
   event_user(3);
  }
  draw_set_blend_mode(bm_normal);
 } else { // do nothing
  light_color[7]=c_black;
 }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw the HUD overlay
if ( lasthit &lt; statusdelay and hitpoints&gt;0 ) {
 var p,h,percent,ofs;
 p=(statusdelay-lasthit)/statusdelay;
 h=sprite_get_height(sprite);
 if ( y &gt; global.cy ) ofs=-h/2; else ofs=h/2;
 if ( shields&gt;0 ) {
  percent=shields/totalshields;
  draw_bargraph(x-h/2,y+ofs,"",percent,h,c_blue,p);
 } else {
  percent=hitpoints/totallife;
  draw_bargraph(x-h/2,y+ofs,"",percent,h,damage_color(percent),p);
 }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i,j,r1,r2,ratio,xw,yh,xofs,yofs,holesize;
draw_sprite_ext(sprite,0,x,y,scale,scale,image_angle,color,alpha);

// Render hot/cold effect overlay
surface_set_target(global.surface_512a);
draw_clear_alpha(c_black,0);

draw_set_blend_mode(bm_normal);
r1=(512/damage_w);
r2=(512/damage_h);
for ( i=0; i&lt;damage_w; i++ ) for ( j=0; j&lt;damage_h; j++ ) {
 if ( damage[i,j] != -666 ) {
  if ( melted[i,j] &gt; 0 ) {
   ratio=melted[i,j]/100;
   draw_sprite_ext(melted_sprite[i,j],melted_num[i,j],
    i*r1,j*r2,ratio,ratio,(i+j)%360,c_white,ratio);
  }
  if ( heatcold[i,j] &gt; 60 ) {
   ratio=heatcold[i,j]/273.0;
//   draw_set_blend_mode(bm_add); // looks better without
   draw_sprite_ext(s_melt,0,i*r1,j*r2,ratio,ratio,(i+j)%360,c_white,ratio);
//   draw_set_blend_mode(bm_normal);
  } else if ( heatcold[i,j] &lt; -60 ) {
   ratio=heatcold[i,j]/(-273.0);
   draw_sprite_ext(s_freeze,0,i*r1,j*r2,ratio,ratio,(i+j)%360,c_white,ratio);
  }
 }
}

for ( i=0; i&lt;damage_w; i++ ) {
 for ( j=0; j&lt;damage_h; j++ ) {
  if ( ejections[i,j] &gt; 0 ) {
   if ( ejection_alpha[i,j] &lt; 1.0 ) ejection_alpha[i,j]+=0.05;
   if ( ejections[i,j] &gt; 20.0 ) holesize=1;
   else holesize=ejections[i,j]/20;
   if ( holesize &lt; 0.1 ) holesize=0.1;
   draw_sprite_ext(s_holes,(i+j)%sprite_get_number(s_holes),i*r1,j*r2,holesize,holesize,(i+j)%360,c_white,ejection_alpha[i,j]);
  }
 }
}

draw_set_blend_mode(bm_subtract);
//draw_set_blend_mode(bm_normal); // debugging
draw_sprite_ext(s_hydromine_sub,0,0,0,1,1,0,c_white,alpha);
draw_set_blend_mode(bm_normal);
surface_reset_target();

//xw=512*scale;
//yh=512*scale;
//draw_surface_rotate_origin(global.surface_512a,256,256,x-32,y,scale,scale,image_angle,c_white,0.65*alpha);
//draw_surface_rotate_origin3(global.surface_512a,256,256,x-32,y,scale,scale,image_angle,c_white,0.65*alpha);
// -32, why?
//draw_surface_ext(global.surface_512a,x-xw/2,y-yh/2,scale,scale,image_angle,c_white,0.65*alpha);
draw_set_color(c_white);
draw_set_alpha(0.65*alpha);
xofs=sprite_xoffset;
yofs=sprite_yoffset;
draw_surface_rotate_origin(global.surface_512a,xofs,yofs,x,y,image_angle,scale,scale);
draw_set_alpha(1.0);

draw_set_blend_mode(bm_normal);

update_hardpoints(id);
render_hardpoints(id);

render_lights(id);

event_user(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
