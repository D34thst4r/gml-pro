<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_spectre_cruiser</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>o_uberparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i,j,r;
name="Allindorna Battlecruiser";
uid=new_uid(object_index);
dying=false;
turnSpeed=0.1;
sprite=s_allindorna_cruiser;
scale=1.0;

screenw=sprite_get_width(sprite)*scale;
screenh=sprite_get_height(sprite)*scale;
direction=number_range(0,360);
alpha=1.0;
color=c_white;
shields=100;
totalshields=100;
hitpoints=1000;
totallife=1000;

velocity=0;
maxvelocity=4;
deltavelocity=0.0;
accel=0.01;
decel=0.05;
turning=0.0;

team=1;
lasthit=240;
statusdelay=240;
heatdiss=1; // heat dissapation
elecres=1; // electrical resistance
acidres=1; // acid resistance
radres=1; // radiation resistance
overloading=100;
overloadrate=10;
overloadspeed=10;
overloadspeeddecrease=0.1;
overloaddecrease=1;
staticdischaring=true;
nanorepairing=true;
crew=0;//30;
mincrew=10+(random(6)-3);
ejections_total=0;
cargo=30;

// Init damage profile
systems[0]=100;
systems[1]=100;
systems[2]=100;
systems[3]=100;
systems[4]=100;

spid=find_ship_profile(sprite_index);
targetinfo=noone;

// Build a percentile copy of the grid
// Build a heat/cold grid
st_vec2d_get(global.ship_profile_vec[spid]);
damage_w=global.vec_x;
damage_h=global.vec_y;
damage[0,0]=0;
heatcold[0,0]=0;
melted[0,0]=0;
melted_sprite[0,0]=noone;
melted_num[0,0]=0;
static[0,0]=0;
electrified[0,0]=0;
acid[0,0]=0;
acidized[0,0]=0;
radiation[0,0]=0;
irradiated[0,0]=0;
ejections[0,0]=0;
ejection_alpha[0,0]=0;
totalrads=0;
for ( i=0; i&lt;global.vec_x; i++ ) for ( j=0; j&lt;global.vec_y; j++ ) {
 r=sa_get(global.ship_profile[spid],i,j);
 if ( r == 1 ) {
  melted[i,j]=0;
  melted_sprite[i,j]=noone;
  melted_num[i,j]=0;
  ejections[i,j]=0;
  ejection_alpha[i,j]=0;
  heatcold[i,j]=0;
  acid[i,j]=0;
  acidized[i,j]=0;
  radiation[i,j]=0;
  irradiated[i,j]=0;
  static[i,j]=0;
  electrified[i,j]=0;
  damage[i,j]=100;
 } else {
  melted[i,j]=-666;
  melted_sprite[i,j]=noone;
  melted_num[i,j]=-666;
  ejections[i,j]=-666;
  ejection_alpha[i,j]=0;
  heatcold[i,j]=-666;
  acid[i,j]=-666;
  acidized[i,j]=-666;
  radiation[i,j]=-666;
  irradiated[i,j]=-666;
  static[i,j]=-666;
  electrified[i,j]=-666;
  damage[i,j]=-666;
 }
}
shipfx_probe_x=0;
shipfx_probe_y=0;

// Register with the shipfx manager
register_shipfx(id);

// Collision profile
create_collision_profile(id);

// AI States
waiting_for=0.0;
moving_to=false;

moving_to_x=0.0;
moving_to_y=0.0;
destination=noone;

omoving_to_x=0.0;
omoving_to_y=0.0;
odestination=noone;

heading_to=0.0;
course_plot_attempts=0;

// Set when you change the scale
image_xscale=scale;
image_yscale=scale;

hardpoints=15;
mount_hardpoint(
 id,0, 0, -346,0,s_tinytur_28,0,o_weapon1,90.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);

mount_hardpoint(
 id,1, 0, -320,0,s_tinytur_28,0,o_weapon1,90.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);

mount_hardpoint(
 id,2, 0, -296,0,s_tinytur_28,0,o_weapon1,90.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);

mount_hardpoint(
 id,3, 0, -270,0,s_tinytur_28,0,o_weapon1,90.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);

mount_hardpoint(
 id,4, 0, -244,0,s_tinytur_28,0,o_weapon1,90.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);


mount_hardpoint(
 id,5,-175,-7,0,s_tinytur_28,0,o_weapon1,90.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);
mount_hardpoint(
 id,6,163,-7,0,s_tinytur_28,0,o_weapon1,90.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);


mount_hardpoint(
 id,7,-39,142,0,s_turret1,0,o_weapon1,90.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);
mount_hardpoint(
 id,8, 39,142,0,s_turret1,0,o_weapon1,90.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);

mount_hardpoint(
 id,9,40,63,0,s_tinytur_28,0,o_weapon1,90.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);
mount_hardpoint(
 id,10,30,10,0,s_tinytur_28,0,o_weapon1,90.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);
mount_hardpoint(
 id,11,19,-43,0,s_tinytur_28,0,o_weapon1,90.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);

mount_hardpoint(
 id,12,-42,63,0,s_tinytur_28,0,o_weapon1,90.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);
mount_hardpoint(
 id,13,-32,10,0,s_tinytur_28,0,o_weapon1,90.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);
mount_hardpoint(
 id,14,-19,-43,0,s_tinytur_28,0,o_weapon1,90.0,1.0,c_white,
 bm_add,s_muzzle_flashes,1.0,s_any(s_muzzle_flashes),0
);


// Lights
lights=17;
mount_light(id, 0, 0, 122,c_lime,   2, 1.0, s_lights_add,  6,0, 0.1,0,bm_add,  0, 0.15,0.00); // Fan lights
mount_light(id, 1, 0, 114,c_red,    2, 2.0, s_lights_add,  6,0, 0.1,0,bm_add,  0, 0.35,1.35);
mount_light(id, 2, 0,  33,c_lime,   2,10.0, s_lights_add,  6,0,0.01,0,bm_add,  0, 0.15,0.70); // Rear
mount_light(id, 3, 0,   0,c_red,    4, 0.4, s_whiteflare,  5,0,0.01,0,bm_add,  0, 0.35,2.0); // Cone lights
mount_light(id, 4, 0,-127,c_orange, 4, 5.0, s_whiteflare,  5,0,0.01,0,bm_add,  0, 0.20,2.0);
mount_light(id, 5, 0,-148,c_red,    4,10.0, s_lights_add,  6,0,0.01,0,bm_add,  0, 0.5,0.0); // Panel Lights
mount_light(id, 6, 0,-167,c_lime,   4,2.0, s_lights_add,  6,0,0.01,0,bm_add,  0, 0.15,5.0); 

mount_light(id, 7,-136, 18,c_red,  4,20.0, s_lights_add,  6,0,0.01,0,bm_add,   0, 0.5,0.0);
mount_light(id, 8,-124, 18,c_red,  4,20.0, s_lights_add,  6,0,0.01,0,bm_add,   0, 0.5,2.0);
mount_light(id, 9,-104, 18,c_red,  4,20.0, s_lights_add,  6,0,0.01,0,bm_add,   0, 0.5,4.0);

mount_light(id,10, 132, 18,c_red,  4,20.0, s_lights_add,  6,0,0.01,0,bm_add,   0, 0.5,0.0);
mount_light(id,11, 118, 18,c_red,  4,20.0, s_lights_add,  6,0,0.01,0,bm_add,   0, 0.5,2.0);
mount_light(id,12,  98, 18,c_red,  4,20.0, s_lights_add,  6,0,0.01,0,bm_add,   0, 0.5,4.0);

mount_light(id,13, 145, 79,c_white, 19, 4.0, s_lights_add,  6,0,0.01,0,bm_add,  0, 0.5,1.0); // Cone lights
mount_light(id,14,-150, 79,c_white, 19, 4.0, s_lights_add,  6,0,0.01,0,bm_add,  0, 0.5,2.0);
mount_light(id,15,-148,114,c_white, 19, 4.0, s_lights_add,  6,0,0.01,0,bm_add,  0, 0.5,3.0); // Panel Lights
mount_light(id,16, 143,114,c_white, 19, 4.0, s_lights_add,  6,0,0.01,0,bm_add,  0, 0.5,4.0); 

//mount_light(id,9,-154,-343,c_white,4,3.0, s_whiteflare,  5,0,0.01,0,bm_normal,0, 0.75,0.0);

// Thrusters
sincethrust=0.0;
thrustcolor=c_yellow;
thrustcolor2=make_color_rgb(128,16,16);
thrusters=s_jetrampup;
thrustanim=0;

thrust_points=3;

thrust_x[0]=-31;
thrust_y[0]=227;
thrustangle[0]=0.0;
thrust_x[1]=0;
thrust_y[1]=231;
thrustangle[1]=0.0;
thrust_x[2]=27;
thrust_y[2]=227;
thrustangle[2]=0.0;

thrust_time=0;
thrusting=false;

helmsman_pedal_foot=5.0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( targetinfo != noone ) {
 with (targetinfo) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ai_tourist_ship_step(id);

check_instance_messages(id);

lasthit+=1;

// Collision
collision_damage(id);

if ( hitpoints &lt;= 0 ) {
 if ( !dying ) {
  dying=true;
   // Eject Lifeboats
   // Explode
  request_explosion(x,y,0);
  request_explosion(x,y,2);
  request_explosion(x,y,3);
  request_explosions(x,y,1,256+64,10+random(10),512,30,5);
//  5.0,0.75,
//  2.0
//  );
  lifespan=sprite_get_number(s_huge_explosion);
 }
 if ( random(100) &lt; 3 ) {
  request_explosions(x,y,1,lifespan+64,random(10),512,15,5);
 }
 lifespan-=1;
 if ( lifespan &lt;= 0 ) dead=true;
 else 
 alpha=lifespan/(sprite_get_number(s_huge_explosion));
} 

// Stop the overload
if ( overloadspeed &gt; 2 ) overloadspeed-=overloadspeeddecrease;
if ( overloading &gt; 0 ) overloading-=overloaddecrease;

// Drift
direction+=turning;

// Turning
image_angle=direction;

// Move position based on velocity
move(id);

// Thrusting
ai_thrust(id);

// Die
if ( dead ) instance_destroy();
else update_shipfx(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( targetinfo != noone ) {
 with ( targetinfo ) instance_destroy();
 targetinfo=noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( targetinfo == noone ) {
 targetinfo=instance_create(x+(screenw/4),y-(screenh/2),o_targetinfo);
 targetinfo.target=id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw the HUD overlay
screen_translate(x,y);
if ( lasthit &lt; statusdelay and hitpoints&gt;0 ) {
 var p,h,percent,ofs;
 p=(statusdelay-lasthit)/statusdelay;
 h=sprite_get_height(sprite);
 if ( global.screen_y &gt; global.cy ) ofs=-h/2; else ofs=h/2;
 if ( shields&gt;0 ) {
  percent=shields/totalshields;
  draw_bargraph(global.screen_x-h/2,global.screen_y+ofs,"",percent,h,c_blue,p);
 } else {
  percent=hitpoints/totallife;
  draw_bargraph(global.screen_x-h/2,global.screen_y+ofs,"",percent,h,damage_color(percent),p);
 }
}
draw_set_color(c_orange);
draw_text(20,30,int(moving_to_x)+","+int(moving_to_y)+":"+int(destination.id));


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i,j,r1,r2,ratio,xw,yh,xofs,yofs,holesize;


// Render hull
draw_sprite_ext(sprite,0,x,y,scale,scale,image_angle,color,alpha);

// Render hot/cold effect overlay
surface_set_target(global.surface_1024);
draw_clear_alpha(c_black,0);

draw_set_blend_mode(bm_normal);
r1=(sprite_get_width(sprite)/damage_w);
r2=(sprite_get_height(sprite)/damage_h);
for ( i=0; i&lt;damage_w; i++ ) for ( j=0; j&lt;damage_h; j++ ) {
 if ( damage[i,j] != -666 ) {
  if ( melted[i,j] &gt; 0 ) {
   ratio=melted[i,j]/100;
   draw_sprite_ext(melted_sprite[i,j],melted_num[i,j],
    i*r1,j*r2,ratio,ratio,(i+j)%360,c_white,ratio);
  }
  if ( heatcold[i,j] &gt; 60 ) {
   ratio=heatcold[i,j]/273.0;
//   draw_set_blend_mode(bm_add); // looks better without
   draw_sprite_ext(s_melt,0,i*r1,j*r2,ratio,ratio,(i+j)%360,c_white,ratio);
//   draw_set_blend_mode(bm_normal);
  } else if ( heatcold[i,j] &lt; -60 ) {
   ratio=heatcold[i,j]/(-273.0);
   draw_sprite_ext(s_freeze,0,i*r1,j*r2,ratio,ratio,(i+j)%360,c_white,ratio);
  }
 }
}

for ( i=0; i&lt;damage_w; i++ ) {
 for ( j=0; j&lt;damage_h; j++ ) {
  if ( ejections[i,j] &gt; 0 ) {
   if ( ejection_alpha[i,j] &lt; 1.0 ) ejection_alpha[i,j]+=0.05;
   if ( ejections[i,j] &gt; 20.0 ) holesize=1;
   else holesize=ejections[i,j]/20;
   if ( holesize &lt; 0.1 ) holesize=0.1;
   draw_sprite_ext(s_holes,(i+j)%sprite_get_number(s_holes),i*r1,j*r2,holesize,holesize,(i+j)%360,c_white,ejection_alpha[i,j]);
  }
 }
}

draw_set_blend_mode(bm_subtract);
//draw_set_blend_mode(bm_normal); // debugging
draw_sprite_ext(s_durag_freighter_sub,0,0,0,1,1,0,c_white,alpha);
draw_set_blend_mode(bm_normal);
surface_reset_target();


//xw=512*scale;
//yh=512*scale;
//draw_surface_rotate_origin(global.surface_512a,256,256,x-32,y,scale,scale,image_angle,c_white,0.65*alpha);
//draw_surface_rotate_origin3(global.surface_512a,256,256,x-32,y,scale,scale,image_angle,c_white,0.65*alpha);
// -32, why?
//draw_surface_ext(global.surface_512a,x-xw/2,y-yh/2,scale,scale,image_angle,c_white,0.65*alpha);
draw_set_color(c_white);
draw_set_alpha(0.65*alpha);
xofs=sprite_xoffset;
yofs=sprite_yoffset;
draw_surface_rotate_origin(global.surface_1024,xofs,yofs,x,y,image_angle,scale,scale);
draw_set_alpha(1.0);

draw_set_blend_mode(bm_normal);

// Render Hardpoints
update_hardpoints(id);
render_hardpoints(id);

// Draw running lights
render_lights(id);

// Render Thrusters
if ( thrust_time &gt; 0.0 ) {
 draw_set_blend_mode(bm_add);
 if ( thrust_time &gt;= sprite_get_number(s_jetrampup) and thrusting ) {
  thrustanim+=1;
  if ( thrustanim &gt;= sprite_get_number(s_jetloop) ) thrustanim=0;
  for ( i=0; i&lt;thrust_points; i++ ) {
   rotate_point(-degtorad(image_angle),thrust_x[i],thrust_y[i]);  
   global.script_rotate_point_x+=x;
   global.script_rotate_point_y+=y;
   draw_sprite_ext(s_jetloop,thrustanim,
    global.script_rotate_point_x,global.script_rotate_point_y,
    2.0,2.0,direction+thrustangle[i],thrustcolor,0.5
   );
   draw_sprite_ext(s_jetloop,thrustanim,
    global.script_rotate_point_x,global.script_rotate_point_y,
    1.5,1.5,direction+thrustangle[i],thrustcolor,1.0
   );
   draw_sprite_ext(s_jetloop,thrustanim,
    global.script_rotate_point_x,global.script_rotate_point_y,
    1.0,1.0,direction+thrustangle[i],thrustcolor2,1.0
   );
  }
 } else {
  for ( i=0; i&lt;thrust_points; i++ ) {
   rotate_point(-degtorad(image_angle),thrust_x[i],thrust_y[i]+17);
   global.script_rotate_point_x+=x;
   global.script_rotate_point_y+=y;
   draw_sprite_ext(s_jetrampup,thrust_time,
    global.script_rotate_point_x,global.script_rotate_point_y,
    2.0,2.0,direction+thrustangle[i],thrustcolor,0.5
   );   
   draw_sprite_ext(s_jetrampup,thrust_time,
    global.script_rotate_point_x,global.script_rotate_point_y,
    1.5,1.5,direction+thrustangle[i],thrustcolor,1.0
   );
   draw_sprite_ext(s_jetrampup,thrust_time,
    global.script_rotate_point_x,global.script_rotate_point_y,
    1.0,1.0,direction+thrustangle[i],thrustcolor2,1.0
   );
  }
 }
 draw_set_blend_mode(bm_normal);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>110,222</point>
    <point>194,194</point>
  </PhysicsShapePoints>
</object>
