<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_starliner</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ship_setup(id,s_starliner,s_starliner_sub,"Commercial Starliner");

hitpoints=1000;
totallife=1000;
maxvelocity=3;
accel=0.01;
decel=0.05;
mincrew=14;
cargo=200;
cargo_capacity=300;
crew=mincrew+(random(6)-3);
setup_cargo(id);

ship_basic_damage_profile(id,1);
register_shipfx(id); // Register with the shipfx manager
create_collision_profile(id);// Collision profile
ai_tourist_setup(id); // AI

// Thrusters
ai_thrust_setup(id,c_maroon,c_yellow);
ai_thrust_add(id, -111,517,0, 5,4,0.5, 3,1,1.0, 1,0.8,1, 3); // add thrust emitter
ai_thrust_add(id,  111,517,0, 5,4,0.5, 3,1,1.0, 1,0.8,1, 3); // add thrust emitter

// Doohickeys
fanSpeed=1.0;
fanAngle=0.0;
lifeboat_count=8;
lifeboat_x[0]=-186;
lifeboat_y[0]=260;
lifeboat_x[1]=186;
lifeboat_y[1]=260;
lifeboat_x[2]=-186;
lifeboat_y[2]=260-128;
lifeboat_x[3]=186;
lifeboat_y[3]=260-128;
lifeboat_x[4]=-186;
lifeboat_y[4]=260-128-128;
lifeboat_x[5]=186;
lifeboat_y[5]=260-128-128;
lifeboat_x[6]=-186;
lifeboat_y[6]=260-128-128-128;
lifeboat_x[7]=186;
lifeboat_y[7]=260-128-128-128;

// Lights
lights=10;
mount_light(id,0, 49,333,c_white,2,5.0,s_orangeflare,4,0, 0.1,0,bm_normal,0, 0.35,0.0); // Fan lights
mount_light(id,1,-49,333,c_white,2,5.0,s_orangeflare,4,0, 0.1,0,bm_normal,0, 0.35,2.5);
mount_light(id,2, 23,507,c_lime,6,1.0, s_lights_add,15,0,0.01,0,bm_add,0, 0.25,0.0); // Rear
mount_light(id,3,-23,507,c_blue,4,1.0, s_lights_add,15,0,0.01,0,bm_add,0, 0.25,0.125);
mount_light(id,4, 106,-410,c_white,4,3.0, s_yellowflare,5,0,0.01,0,bm_normal,0, 0.5,2.0); // Cone lights
mount_light(id,5,-106,-410,c_white,4,3.0, s_yellowflare,5,0,0.01,0,bm_normal,0, 0.5,2.0);
mount_light(id,6, 124,-382,c_white,4,3.0, s_yellowflare,5,0,0.01,0,bm_normal,0, 0.6,1.0); // Cone lights
mount_light(id,7,-128,-382,c_white,4,3.0, s_yellowflare,5,0,0.01,0,bm_normal,0, 0.6,1.0);
mount_light(id,8, 150,-343,c_white,4,3.0, s_yellowflare,5,0,0.01,0,bm_normal,0, 0.75,0.0); // Cone lights
mount_light(id,9,-154,-343,c_white,4,3.0, s_yellowflare,5,0,0.01,0,bm_normal,0, 0.75,0.0);

// Windows
windows=real(int(number_range(6,30)));
for ( i=0; i&lt;windows; i++ ) {
 window[i]=st_vec2d_set(real(int(random(202)))%12,real(int(random(102)))%12);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( targetinfo != noone ) {
 with (targetinfo) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ai_tourist_ship_step(id);

fanSpeed=1.0+velocity;
fanAngle+=fanSpeed;

check_instance_messages(id);

lasthit+=1;

// Collision
collision_damage(id);

if ( hitpoints &lt;= 0 ) {
 if ( !dying ) {
  dying=true;
  var o;
   // Eject Lifeboats
   for ( i=0; i&lt;lifeboat_count; i++ ) {
    rotate_point(-degtorad(image_angle),lifeboat_x[i],lifeboat_y[i]);
    global.script_rotate_point_x+=x;
    global.script_rotate_point_y+=y;
    request_instance(o_ai_starliner_lifeboat,team,direction,
     global.script_rotate_point_x,
     global.script_rotate_point_y
    );
   }
   rotate_point(-degtorad(image_angle),0,495);
   global.script_rotate_point_x+=x;
   global.script_rotate_point_y+=y;
   request_instance(o_ai_starliner_rearpod,team,direction+180,
    global.script_rotate_point_x,
    global.script_rotate_point_y
   );

   // Explode
  request_explosion(x,y,0);
  request_explosion(x,y,2);
  request_explosion(x,y,3);
  request_explosions(x,y,1,256+64,10+random(10),512,30,5);
//  5.0,0.75,
//  2.0
//  );
  lifespan=sprite_get_number(s_huge_explosion);
 }
 if ( random(100) &lt; 3 ) {
  request_explosions(x,y,1,lifespan+64,random(10),512,15,5);
 }
 lifespan-=1;
 if ( lifespan &lt;= 0 ) dead=true;
 else 
 alpha=lifespan/(sprite_get_number(s_huge_explosion));
} 

// Stop the overload
if ( overloadspeed &gt; 2 ) overloadspeed-=overloadspeeddecrease;
if ( overloading &gt; 0 ) overloading-=overloaddecrease;

// Drift
direction+=turning;

// Turning
image_angle=direction;

// Move position based on velocity
move(id);

// Modify lit windows
if ( random(500) &lt; 3 ) {
 if ( random(100) &gt; 50 ) { // turn on
  window[windows]=st_vec2d_set(real(int(random(202)))%12,real(int(random(102)))%12);
  windows+=1;
 } else if ( windows &gt; 0 ) { // turn off
  windows-=1;
 }
}

// Thrusting
ai_thrust(id);

// Die
if ( dead ) instance_destroy();
else update_shipfx(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( targetinfo != noone ) {
 with ( targetinfo ) instance_destroy();
 targetinfo=noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( targetinfo == noone ) {
 targetinfo=instance_create(x+(screenw/4),y-(screenh/2),o_targetinfo);
 targetinfo.target=id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw the HUD overlay
screen_translate(x,y);
if ( lasthit &lt; statusdelay and hitpoints&gt;0 ) {
 var p,h,percent,ofs;
 p=(statusdelay-lasthit)/statusdelay;
 h=sprite_get_height(sprite);
 if ( global.screen_y &gt; global.cy ) ofs=-h/2; else ofs=h/2;
 if ( shields&gt;0 ) {
  percent=shields/totalshields;
  draw_bargraph(global.screen_x-h/2,global.screen_y+ofs,"",percent,h,c_blue,p);
 } else {
  percent=hitpoints/totallife;
  draw_bargraph(global.screen_x-h/2,global.screen_y+ofs,"",percent,h,damage_color(percent),p);
 }
}
draw_set_color(c_orange);
draw_text(20,30,int(moving_to_x)+","+int(moving_to_y)+":"+int(destination.id));


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Render Thrusters
render_thrusters(id);

// Render hull
draw_sprite_ext(sprite,0,x,y,scale,scale,image_angle,color,alpha);
render_damage_overlay(id);

if ( !dying ) {

 // Draw lit windows
 var wx,wy;
 draw_set_blend_mode(bm_add);
 for ( i=0; i&lt;windows; i++ ) {
  st_vec2d_get(window[i]);
  //
  wx=global.starliner_x[global.vec_x,global.vec_y];
  wy=global.starliner_y[global.vec_x,global.vec_y];
  rotate_point(-degtorad(image_angle),wx,wy);
  global.script_rotate_point_x+=x;
  global.script_rotate_point_y+=y;
  draw_sprite_ext(
   s_starliner_window,0,
   global.script_rotate_point_x,global.script_rotate_point_y,
   1.0,1.0,image_angle,c_yellow,1.0
  );
 }
 draw_set_blend_mode(bm_normal);

 // Draw the fan
 rotate_point(-degtorad(image_angle),-3,351);
 global.script_rotate_point_x+=x;
 global.script_rotate_point_y+=y;
 draw_sprite_ext(s_tiny_fan,0,
  global.script_rotate_point_x,global.script_rotate_point_y,
  1.0,1.0,fanAngle,c_white,1.0
 );

 // Draw lifeboats
 for ( i=0; i&lt;lifeboat_count; i++ ) {
  rotate_point(-degtorad(image_angle),lifeboat_x[i],lifeboat_y[i]);
  global.script_rotate_point_x+=x;
  global.script_rotate_point_y+=y;
  draw_sprite_ext(s_lifeboat,0,
   global.script_rotate_point_x,global.script_rotate_point_y,
   1.0,1.0,direction,c_white,1.0
  );
 }

 // Draw running lights
 render_lights(id);
 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
